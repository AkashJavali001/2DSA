#include <stdio.h>
#include <stdlib.h>

#define MAX 4

struct emp {
    int ssn, sal;
    char name[20], dept[10], desig[15], phno[10];
    struct emp *left, *right;
};
typedef struct emp NODE;

int countnodes(NODE *head) {
    int count = 0;
    while (head) {
        count++;
        head = head->right;
    }
    return count;
}

NODE *getnode() {
    NODE *newnode = (NODE *)malloc(sizeof(NODE));
    newnode->right = newnode->left = NULL;
    printf("\nEnter SSN(int), Name(char), Dept(char), Designation(char), Sal(int), Ph.No(char)\n");
    scanf("%d%s%s%s%d%s", &newnode->ssn, newnode->name, newnode->dept, newnode->desig, &newnode->sal, newnode->phno);
    return newnode;
}

NODE *display(NODE *head) {
    NODE *p = head;
    if (!p) {
        printf("\nNo Employee data\n");
        return head;
    }
    printf("\n----EMPLOYEE DATA----\n");
    printf("\nSSN\tNAME\tDEPT\tDESIGNATION\tSAL\t\tPh.NO.");
    while (p) {
        printf("\n%d\t%s\t%s\t%s\t\t%d\t\t%s", p->ssn, p->name, p->dept, p->desig, p->sal, p->phno);
        p = p->right; 
    }
    printf("\nThe no. of nodes in list is: %d", countnodes(head));
    return head;
}

NODE *insert_end(NODE *head) {
    if (countnodes(head) == MAX) printf("\nList is Full!!");
    else {
        NODE *newnode = getnode();
        if (!head) head = newnode;
        else {
            NODE *p = head;
            while (p->right) p = p->right;
            p->right = newnode;
            newnode->left = p;
        }
    }
    return display(head);
}

NODE *insert_front(NODE *head) {
    if (countnodes(head) == MAX) printf("\nList is Full!!");
    else {
        NODE *newnode = getnode();
        if (!head) head = newnode;
        else {
            newnode->right = head;
            head->left = newnode;
            head = newnode;
        }
    }
    return display(head);
}

NODE *delete_front(NODE *head) {
    if (!head) printf("\nList is Empty (QUEUE)");
    else {
        NODE *p = head;
        head = head->right;
        if (head) head->left = NULL;
        free(p);
        printf("\nFront(first) node is deleted");
    }
    return display(head);
}

NODE *delete_end(NODE *head) {
    NODE *p = head;
    if (!p) printf("\nList is Empty (QUEUE)");
    else if (!p->right) {
        free(p);
        printf("\nLast(end) entry is deleted");
        head = NULL;
    } else {
        while (p->right) p = p->right; 
        p->left->right = NULL;
        free(p);
        printf("\nLast(end) entry is deleted");
    }
    return display(head);
}

NODE *queue(NODE *head) {
    int ch1, ch2;
    do {
        printf("\nDLL used as Double Ended Queue");
        printf("\n1.QUEUE- Insert at Rear & Delete from Front");
        printf("\n2.QUEUE- Insert at Front & Delete from Rear");
        printf("\n3.Exit");
        printf("\nEnter your choice: ");
        int ch; scanf("%d", &ch);
        switch (ch) {
            case 1:
                do {
                    printf("\n1.Insert at Rear\t2.Delete from Front\t3.Exit");
                    printf("\nEnter your choice: ");
                    scanf("%d", &ch1);
                    switch (ch1) {
                        case 1: head = insert_end(head); break;
                        case 2: head = delete_front(head); break;
                    }
                } while (ch1 != 3);
                break;
            case 2:
                do {
                    printf("\n1.Insert at Front\t2.Delete from Rear\t3.Exit");
                    printf("\nEnter your choice: ");
                    scanf("%d", &ch2);
                    switch (ch2) {
                        case 1: head = insert_front(head); break;
                        case 2: head = delete_end(head); break;
                    }
                } while (ch2 != 3);
                break;
        }
    } while (ch != 3);
    return head;
}

int main() {
    NODE *head = NULL;
    printf("\n----------Employee Database-----------");
    int ch;
    do {
        printf("\n1.Create\t2.Display\t3.Insert\t4.Delete\t5.Queue\t6.Exit");
        printf("\nEnter your choice: ");
        scanf("%d", &ch);
        switch (ch) {
            case 1: {
                printf("\nHow many employees data you want to create: ");
                int n; scanf("%d", &n);
                for (int i = 0; i < n; i++) head = insert_end(head);
                break;
            }
            case 2: head = display(head); break;
            case 3: head = queue(head); break;
            case 4: {
                int ch; do {
                    printf("\n1.Delete from Front(First)\t2.Delete from End(Rear/Last)\t3.Exit");
                    printf("\nEnter your choice: ");
                    scanf("%d", &ch);
                    switch (ch) {
                        case 1: head = delete_front(head); break;
                        case 2: head = delete_end(head); break;
                    }
                } while (ch != 3);
                break;
            }
        }
    } while (ch != 6);
    return 0;
}
