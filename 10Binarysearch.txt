#include <stdio.h>
#include <stdlib.h>

struct BST {
    int data;
    struct BST *left, *right;
};

typedef struct BST NODE;

NODE* create_node(int data) {
    NODE* temp = (NODE*)malloc(sizeof(NODE));
    temp->data = data;
    temp->left = temp->right = NULL;
    return temp;
}

NODE* insert(NODE* node, int data) {
    if (node == NULL) return create_node(data);
    if (data < node->data) node->left = insert(node->left, data);
    else if (data > node->data) node->right = insert(node->right, data);
    return node;
}

NODE* search(NODE* node, int data) {
    if (node == NULL || node->data == data) return node;
    if (data < node->data) return search(node->left, data);
    return search(node->right, data);
}

void inorder(NODE* node) {
    if (node != NULL) {
        inorder(node->left);
        printf("%d\t", node->data);
        inorder(node->right);
    }
}

void preorder(NODE* node) {
    if (node != NULL) {
        printf("%d\t", node->data);
        preorder(node->left);
        preorder(node->right);
    }
}

void postorder(NODE* node) {
    if (node != NULL) {
        postorder(node->left);
        postorder(node->right);
        printf("%d\t", node->data);
    }
}

NODE* findMin(NODE* node) {
    while (node->left != NULL) node = node->left;
    return node;
}

NODE* delete(NODE* root, int data) {
    if (root == NULL) return root;
    if (data < root->data) root->left = delete(root->left, data);
    else if (data > root->data) root->right = delete(root->right, data);
    else {
        if (root->left == NULL) {
            NODE* temp = root->right;
            free(root);
            return temp;
        } else if (root->right == NULL) {
            NODE* temp = root->left;
            free(root);
            return temp;
        }
        NODE* temp = findMin(root->right);
        root->data = temp->data;
        root->right = delete(root->right, temp->data);
    }
    return root;
}

int main() {
    NODE* root = NULL;
    int choice, data, n, i;
    while (1) {
        printf("\n1.Insert\n2.Search\n3.Delete\n4.Inorder\n5.Preorder\n6.Postorder\n7.Exit");
        printf("\nEnter your choice: ");
        scanf("%d", &choice);
        switch (choice) {
            case 1:
                printf("\nEnter N value: ");
                scanf("%d", &n);
                printf("\nEnter the values to create BST: ");
                for (i = 0; i < n; i++) {
                    scanf("%d", &data);
                    root = insert(root, data);
                }
                break;
            case 2:
                printf("\nEnter the element to search: ");
                scanf("%d", &data);
                if (search(root, data) == NULL) printf("\nElement not found");
                else printf("\nElement found is: %d", data);
                break;
            case 3:
                printf("\nEnter the element to delete: ");
                scanf("%d", &data);
                root = delete(root, data);
                break;
            case 4:
                printf("\nInorder Traversal: ");
                inorder(root);
                break;
            case 5:
                printf("\nPreorder Traversal: ");
                preorder(root);
                break;
            case 6:
                printf("\nPostorder Traversal: ");
                postorder(root);
                break;
            case 7:
                exit(0);
            default:
                printf("\nWrong option");
                break;
        }
    }
    return 0;
}
